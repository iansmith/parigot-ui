{{/* ----------------------------------------------------- */}}
{{- define "TextConstant" -}}
{{- .Value -}}
{{- end -}}{{/* template TextConstant */}}

{{/* ----------------------------------------------------- */}}
{{- define "TextVar" -}}
fmt.Sprint({{.Name}})
{{- end -}} {{/* template TextVar */}}

{{/* ----------------------------------------------------- */}}
{{- define "TextInline" -}}
{{- range . -}}
{{- $subtemplate := .SubTemplate -}}

{{- if eq $subtemplate "TextConstant" -}}
{{- template "TextConstant" . -}}
{{- end -}}{{/*TextConstant*/}}

{{- if eq $subtemplate "TextVar" }}
{{ template "TextVar" . }}
{{- end -}} {{/*TextVar*/}}
{{- if eq $subtemplate "TextInline" }}
// Inline Code Sections Do Not Nest
{{- end -}} {{/*TextInline*/}}

{{- end -}} {{/* end of ranging over text objects */}}
{{- end -}} {{/* template TextInline*/}}

{{/* ----------------------------------------------------- */}}
{{- define "ParamFormal" -}}
{{- if . }}
{{- range . }}
{{- .Name }} {{ .Type -}},
{{- end }} {{/* end of ranging over param list */}}
{{- end }} {{/*end of if */}}
{{- end }} {{/* end of template ParamFormal */}}

{{/* ----------------------------------------------------- */}}
{{- define "Atom" -}}
    {{$tag:="span"}}
    {{$id:=dummyId}}
    {{$class:=zeroStrings}}
    {{if .Atom.Tag}}
    {{$tag = .Atom.Tag.Tag}}
    {{$id = .Atom.Tag.Id}}
    {{$class = .Atom.Tag.Class}}
    {{end}}
    n{{.Number}}:=dommsg.Atom{
        Tag: dommsg.Tag {
            Name:"{{$tag}}",
            Id:"{{$id}}",
            Class: []string{
{{range $class}}
    "{{.}}",
{{end}} {{/* end of range over classes*/}}
        },
{{if .Atom.Invoc}}        
        Text: {{.Atom.Invoc.Name}}(),
{{else}}
        Text:"",
{{end}}{{/*end of text invocation*/}}        
    },
    }
{{end}}{{/*end of template*/}}
{{/* ----------------------------------------------------- */}}
{{- define "ListOneLevel" -}}
    n{{.Number}}:=&dommsg.List{
        Children:[]*dommsg.Element{
{{range .List.List}}
        n{{.Number}},
{{end}}{{/* end of ranging over the list of sexprs */}}
        },
    }
{{end}}{{/*end oftemplate*/}}
{{/* ----------------------------------------------------- */}}
{{- define "DocSexpr" -}}
{{if .Atom}}
{{ template "Atom" .}}
{{else}}{{/*other side if .Atom*/}}
{{ template "ListOneLevel" . }}
{{range .List.List}} 
{{ template "DocSexpr" .}}    
{{end}} {{/*end of list elements*/}}
{{end}} {{/*end of if/else on .Atom */}}
{{ end}}{{/*end of template*/}}
{{/* ----------------------------------------------------- */}}
{{/* PROGRAM GEN */}}
{{/* ----------------------------------------------------- */}}
package {{.golang.package}}

{{/* IMPORT/PREAMBLE SECTION */}}

{{- if .import -}}
{{- template "TextInline" .import.TextItem_}}
{{- end -}}{{/* if */}}

{{/* DOC SECTION */}}

{{if .text }}
{{range .text.Func}}
func {{.Name -}}({{- template "ParamFormal" .Param -}}) string {
    var buf bytes.Buffer
{{ range .Item -}}
{{- $subtemplate := .SubTemplate -}}

{{- if eq $subtemplate "TextConstant" -}}
buf.WriteString(`{{- template "TextConstant" . -}}`)
{{ end }}{{/*TextConstant*/ -}}
{{- if eq $subtemplate "TextVar" -}}
buf.WriteString({{ template "TextVar" . }})
{{ end }} {{/*TextVar*/}}
{{- if eq $subtemplate "TextInline" -}}
{{ template "TextInline" .TextItem_ }}
{{end }} {{/*TextInline*/}}
{{- end }} {{/* end ranging item */ -}}
    return buf.String()
}
{{end}}{{/*end range over all text objects*/}}

{{end}}{{/*end of if for is .text nil */}}

{{/* DOC SECTION */}}
{{if .doc }}
{{range .doc.DocFunc}}
func {{.Name -}}() *dommsg.Sexpr {
{{range .DocSexpr}} 
{{template "DocSexpr" .}}
return n0
}

{{end}} {{/* end of sexprs */}}
{{end}} {{/*end of doc funcs*/}}
{{end}} {{/*if doc section*/}}