{{/* ----------------------------------------------------- */}}
{{- define "TextConstant" -}}
{{- .Value -}}
{{- end -}}{{/* template TextConstant */}}

{{/* ----------------------------------------------------- */}}
{{- define "TextVar" -}}
fmt.Sprint({{.Name}})
{{- end -}} {{/* template TextVar */}}

{{/* ----------------------------------------------------- */}}
{{- define "TextInline" -}}
{{- range . -}}
{{- $subtemplate := .SubTemplate -}}

{{- if eq $subtemplate "TextConstant" -}}
{{- template "TextConstant" . -}}
{{- end -}}{{/*TextConstant*/}}

{{- if eq $subtemplate "TextVar" }}
{{ template "TextVar" . }}
{{- end -}} {{/*TextVar*/}}
{{- if eq $subtemplate "TextInline" }}
// Inline Code Sections Do Not Nest
{{- end -}} {{/*TextInline*/}}

{{- end -}} {{/* end of ranging over text objects */}}
{{- end -}} {{/* template TextInline*/}}

{{/* ----------------------------------------------------- */}}
{{- define "ParamFormal" -}}
{{- if . }}
{{- range . }}
{{- .Name }} {{ .Type -}},
{{- end }} {{/* end of ranging over param list */}}
{{- end }} {{/*end of if */}}
{{- end }} {{/* end of template ParamFormal */}}
{{/* ----------------------------------------------------- */}}
{{- define "Tag" -}}
    Tag: &dommsg.Tag{
        Name: "{{.Tag}}",
        Id:"{{.Id}}",
        CssClass: []string{
        {{- range .Class}}
        "{{.}}",
        {{- end}}
        },
    },
{{end}}{{/* end of template */}}

{{/* ----------------------------------------------------- */}}
{{- define "DocElement" -}}
{{- if not .Child}}
    n{{.Number}}:=&dommsg.Element{
        {{template "Tag" .Tag}}
{{if .TextContent}}
        Text:{{.TextContent.Name}}(),
{{else}}
        Text:"",
{{end}}{{/* end of text content */}}
    }
{{- else}}{{/*other side if no child */}}
{{- range .Child}} 
{{ template "DocElement" .}}    
{{- end}} {{/*end of list elements*/}}

    n{{.Number}} := &dommsg.Element{
    {{- if .Tag}}
        {{template "Tag" .Tag}}
    {{- end}}
        Child: []*dommsg.Element{
{{- range .Child}} 
        n{{.Number}},        
{{- end}} {{/*end of list elements*/}}
    }}

{{- end}} {{/*end of if*/}}
{{- end}} {{/*end of template */}}
{{/* ----------------------------------------------------- */}}
{{/* PROGRAM GEN */}}
{{/* ----------------------------------------------------- */}}

//
// DO NOT EDIT.  This file was machine generated by WCL from {{.inputFile}}.
//
package {{.golang.package}}

{{/* IMPORT/PREAMBLE SECTION */}}

{{- if .import -}}
{{- template "TextInline" .import.TextItem_}}
{{- end -}}{{/* if */}}

{{/* TEXT SECTION */}}

{{if .text }}
{{range .text.Func}}
func {{.Name -}}({{- template "ParamFormal" .Param -}}) string {
    var buf bytes.Buffer
{{ range .Item -}}
{{- $subtemplate := .SubTemplate -}}

{{- if eq $subtemplate "TextConstant" -}}
buf.WriteString(`{{- template "TextConstant" . -}}`)
{{ end }}{{/*TextConstant*/ -}}
{{- if eq $subtemplate "TextVar" -}}
buf.WriteString({{ template "TextVar" . }})
{{ end }} {{/*TextVar*/}}
{{- if eq $subtemplate "TextInline" -}}
{{ template "TextInline" .TextItem_ }}
{{end }} {{/*TextInline*/}}
{{- end }} {{/* end ranging item */ -}}
    return buf.String()
}
{{end}}{{/*end range over all text objects*/}}

{{end}}{{/*end of if for is .text nil */}}

{{/* DOC SECTION */}}
{{if .doc }}
{{range .doc.DocFunc}}
func {{.Name -}}() *dommsg.Element{

{{- template "DocElement" .Elem}}
return n0
}

{{end}} {{/*end of doc funcs*/}}
{{end}} {{/*end of if */}}
